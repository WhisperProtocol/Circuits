pragma circom 2.0.0;

template MiMC5Feistel() {
    signal input iL;
    signal input iR;
    signal input k;

    signal output oL;
    signal output oR;

    var nRounds = 20;
    var c[20] = [
        0,
        106262679627446792860644620872897301495032408886813844782712310712997391606101
        73201566681698188388241404230030386775072677319988320303720681369697770904180
        74638840834287680525818790042503693370007270466543208515565003540972062679504
        15425960272940474410298520676827796118472523554825748451103556143619989294281
        115593910787467529414152910829332027515686002572056953712897795833253395266239
        102412065810653655330412246880403400692466339355143032619438639715597861624282
        53576843908714046135305948496464488226437263439063878894233966970750838357986
        81821700766901542044368814036596595122218562460411910575783359667444035583457
        55592858588872784890109238521772008132687141992323999666390722550906603923857
        21250941433015178764037653422230110315975765220530988713642769112527952519151
        35964296393447642194857658255193880621893616032783729395586433324119721442480
        38625246828464408144141002645562633653538971598782684627216592473265051793856
        101533885174607343467657293043451563236708826217373427758431979034484221158434
        39538552691290196224469487891263615642283744459441284529007833549694623193295
        68674802119211778878527347217671538543137080006358786211076007955200922224383
        17838551034177867663999418913720055231478390519315334796638909236038781227157
        105956713148253065729596968151702617383774116256951845772676271076633329670337
        111886197935536584517611722374161689274365788069165947050609594565611571221462
        4716905275848912353419733019031718382337167232194230930600978804432453226043 
    ];

    signal lastOutputL[nRounds + 1];
    signal lastOutputR[nRounds + 1];

    var base[nRounds];
    signal base2[nRounds];
    signal base4[nRounds];

    lastOutputL[0] <== iL;
    lastOutputR[0] <== iR;

    for(var i = 0; i < nRounds; i++){
        base[i] = lastOutputR[i] + k + c[i];
        base2[i] <== base[i] * base[i];
        base4[i] <== base2[i] * base2[i];

        lastOutputR[i + 1] <== lastOutputL[i] + base4[i] * base[i];
        lastOutputL[i + 1] <== lastOutputR[i];
    }

    oL <== lastOutputL[nRounds];
    oR <== lastOutputR[nRounds];
}

template MiMC5Sponge(nInputs) {
    signal input k;
    signal input ins[nInputs];
    signal output o;

    signal lastR[nInputs + 1];
    signal lastC[nInputs + 1];

    lastR[0] <== 0;
    lastC[0] <== 0;

    component layers[nInputs];

    for(var i = 0; i < nInputs; i++){
        layers[i] = MiMC5Feistel();

        layers[i].iL <== lastR[i] + ins[i];
        layers[i].iR <== lastC[i];
        layers[i].k <== k;

        lastR[i + 1] <== layers[i].oL;
        lastC[i + 1] <== layers[i].oR;
    }

    o <== lastR[nInputs];
}